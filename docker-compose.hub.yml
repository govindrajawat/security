version: '3.8'

services:
  # Loki for log aggregation (replaces ELK)
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    restart: unless-stopped

  # Node Exporter for Server 1 metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  # Prometheus Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    restart: unless-stopped
    mem_limit: 512m

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
    restart: unless-stopped
    mem_limit: 128m

  # Grafana for unified dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    mem_limit: 256m

  # Fail2Ban (host network mode for iptables access)
  fail2ban:
    profiles: ["ips"]
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - /var/log:/var/log:ro
    environment:
      - F2B_LOG_TARGET=STDOUT
      - TZ=UTC
    restart: unless-stopped

  # Falco for runtime security
  falco:
    profiles: ["runtime"]
    image: falcosecurity/falco-no-driver:latest
    container_name: falco
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./falco:/etc/falco
    restart: unless-stopped

  # Trivy for vulnerability scanning
  trivy:
    profiles: ["runtime"]
    image: aquasec/trivy:latest
    container_name: trivy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - trivy_cache:/root/.cache
    restart: "no"

  # Vault for secrets management
  vault:
    profiles: ["secrets"]
    image: vault:latest
    container_name: vault
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    command: ["server", "-config=/vault/config/config.hcl"]
    volumes:
      - vault_data:/vault/data
      - ./vault/config.hcl:/vault/config/config.hcl:ro
    restart: unless-stopped

  # (Optional) add promtail on hub later if needed
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./promtail/promtail-hub.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

volumes:
  loki_data:
  prometheus_data:
  grafana_data:
  vault_data:
  trivy_cache:
